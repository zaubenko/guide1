//Гайд от меня для меня по scala 3, основы
//                                                  Типы:
// Int(целое число)
//var c: Int = 2
// Double(вещественное число двойной точности)
//var c1: Double = 2.2
// String('hello')
//var c2: String = "Hello"
// Long(целое число)
//var c3: Long = 3
//Boolean(true,false)
//var c4: Boolean = true
// Short(целое число)
//var c5: Short = 4
// Byte(целое число(-128,127))
//var c6: Byte = 125
// Float(вещественное число)
//var c7: Float = 2.2141
// Char(целое число от 0 до 65635)
//var c8: Char = 12412
// null(внизу иерархии ссылочных типов,используется для присваивания
// значения null переменной любого ссылочного типа для совместимости с java кодом, использовать в scala не
// рекомендуется)
// var c9: String = null
// Unit(используется для возвращения результата функции если нечего возвращать,аналог Void), единственное значение Unit=()
//
// Nothing(находится внизу иерархии типов и является подтипом любого другого типа, не имеет значений)
//
// Any(супертип для любого другого типа,то есть наследуются от него)
// AnyVal(супертип для любого числового типа, а также для boolean and Unit,подтип типа Any)
// AnyRef(ссылочный тип, любой класс наследуется от этого типа, также тип String)
//
//                                                    Конвертация типов
//1.toDouble = 1.0
//2.2.toInt = 2
//"123".toInt = 123
//"true".toBoolean = true
//                                                      Переменные
// var-изменяемые
// val-неизменяемые(константа)
//var sobaka: String="Alex"
//var v=4 // язык сам может определить тип, в данном случае он определит тип Int

//val k=1 // мы обозначили k константой со значением 1

//                                                        Блоки
//val ck={
      //val c: Int= 1
      //val k: Int= 1+c // (результат последнего значения блока будет являтся значением всего блока, поэтому блоку можно присвоить переменную)
       //}

//                                                       Функции
// val hhq = (x: Int) => x+x
// val sqr = (x: Int, y: Int) => x*y
// hhq(5)
// sqr(2,1) //вызов функции
// val hhq1: Int => Int = x => x+x //можем задать тип сразу
// val sqr1: (Int,Int) => Int = _+_ //можем задать плейсхолдеры и не парится с наименованием аргументов
// sqr1(2,3)
//
// val fact: Int => Int = x => //При рекурсии явно указываем тип
//   if (n==0) 1 else x * fact(x-1)
// fact(5) //=120
//
//
//                                                        Операторы
// СЕКРЕТ(ПРИОРИТЕТ ОПЕРАТОРОВ ОПРИДЕЛЯЕТСЯ ПЕРВЫМ СИМВОЛОМ В ИХ ИМЕНИ)
// Приоритет оператов от высшего к нисшему, спецсимволы которые не упомянуты будут иметь высший приоритет:
//  * / %
//  + -
//  :
//  = !
//  < >
//  &
//  ^
//  |
//  все буквы
// В основном операторы в скала по умолчанию лево-ассоциативные
//
//
//                                                      Массив
// var c=Array(1,2,3,4)
//
//
//                                                      Список
// var c=List('a','b')
//
//                                                     Управляющие структуры
//
// 1.if
// val jon=
// {
// var c = 2
// var k = if (c<1) 1 else 0
// }
//
// 2.for - для создания циклов
//  for(x: Int <- 0 to (10 , 2)) println(x)  //в результате 0,2,4,6,8,10
//
//  val k1=List('a','b')
//  val k2=Array(1,2)
//  for(v1 <- k1; v2 <-k2) println(v1 , "-" , v2) // result= a-1, a-2 , b-1 , b-2
//
// 3.while
// var k=2
// do k=0 while (k>1)
//
//
//                                                         Класс
//
// class User(var name : String = " ",var age : Int=90) {
// }
// var user1=User("Sasha", 25)
//
//
//
//
//